% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/datacube.R
\name{datacube}
\alias{datacube}
\alias{dc_close}
\alias{dc_find_datasets}
\alias{dc_list_measurements}
\alias{dc_list_products}
\alias{dc_load}
\title{Query a datacube}
\usage{
dc_close(dc = getOption("odcr.dc"))

dc_find_datasets(dc = getOption("odcr.dc"), query, lazy = FALSE)

dc_list_measurements(dc = getOption("odcr.dc"))

dc_list_products(dc = getOption("odcr.dc"))

dc_load(dc = getOption("odcr.dc"), query)
}
\arguments{
\item{dc}{a datacube connection of class 'datacube.api.core.Datacube'. By default, the session connection initialized using \code{connect()} is used.}

\item{query}{list, containing query parameters such as
\itemize{
   \item \code{'product'}, character, name of the product to be queries (see \code{dc_list_products()})
   \item \code{'time'}, character vector of length == 2, containing a time query
   \item \code{'x'}, numeric vector of length == 2, containing xmin and xmax
   \item \code{'y'}, numeric vector of length == 2, containing ymin and ymax
   \item \code{'output_crs'}, character, the output CRS, e.g. as epsg in the format \code{'epsg:6933'}
   \item \code{'resolution'}, numeric vector of length == 2
   \item \code{'measurements'}, character vector containing the names or aliases of measurements
}}

\item{lazy}{logical, whether to use lazy dataset finding or not.}
}
\value{
None or \code{data.frame}
}
\description{
These functions query a datacube to which a connection has been established using \code{\link{database_connect}}.
}
\examples{
\dontrun{
library(odcr)

# connect to a database
database_connect(app = "Sentinel_2")

# return a data.frame containing all stored variables/measurements of the current connection
# and its aliases, data types etc.
dc_list_measurements()

# return a data.frame containing all products of the current connection
dc_list_products()

# build a query list
lat <- 22.821
lon <- 28.518
buffer <- 0.05

query <- list(
  'time' = c('2020-01', '2020-03'),
  'x' = c(lon - buffer, lon + buffer),
  'y' = c(lat + buffer, lat - buffer),
  'output_crs' = 'epsg:6933',
  'resolution' = c(-20,20)
)

# return a data.frame of all datasets matching the query
dc_find_datasets(query = c(product = "s2_l2a", query))

# load data and return an xarray object for a query
ds <- dc_load(query = c(product = "s2_l2a", dask_chunks = dict(), query))

# after a lot of queries, you may want to close open connections
dc_close()
}
}
